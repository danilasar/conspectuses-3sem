#v(0.3cm) // вертикальный отступ, горизонтальный h

#set par(justify : true, first-line-indent: 2em)

/ Вопрос 1: В какой регистр надо поместить код выводимого символа? Какой код Dos-функции используется для вывода отдельного символа на экран?

В регистр DL заносится номер используемой для операции вывода функции.
 Вывод информации в ассемблерных программах осуществляется обычно при помощи сервисной функции DOS (прерывание 21h) (код int 02h)

/ Вопрос 2: Какая операция позволяет получить для цифры её код в кодовой таблице?

Для вывода на экран цифры необходимо сначала преобразовать её в символьную форму. То есть, для получения символьной формы необходимо заменить цифру кодом ASCII её изображения. Для этой цели используем команду ADD арифметического сложения цифры, содержащейся в регистре BX, с числом 30h – шестнадцатеричным кодом 0.

/ Вопрос 3: Объясните назначение процедуры. Как определяются начало и конец процедуры?

Практически все современные программы состоят из одной главной программы и небольших частей, то есть подпрограмм (или *процедур*). (Главная программа вызывает эти процедуры на выполнение, передавая им управление процессором. После завершения работы процедуры возвращают управление главной программе и выполнение продолжается с команды, следующей за командой вызова подпрограммы) Достоинством такого метода является возможность разработки программ значительно большего объема небольшими функционально законченными частями.

Директива PROC процедулы MAIN имеет атрибут FAR, который связан с выполнением программы, а именно когда вы запрашиваете выполнение программы, загрузчик использует эту процедуру, как начальную точку для определения первой подлежащей исполнению команды.

Директива ENDP указывает на конец процедуры и содержит то же имя, что и предложение PROC, чтобы позволить ассемблеру соотнести конец процедуры и ее начало. Поскольку процедура должна полностью содержаться в одном сегменте, ENDP завершает процедуру перед тем, как ENDS определяет конец сегмента.

Приведём пример кода:
```nasm

MAIN PROC FAR ; названиеподпрограммы PROC тип (FAR или NEAR)
;Запись адреса PSP в стек
PUSH DS
XOR AX,AX
PUSH AX
...         
RET ;Возврат к PSP
MAIN ENDP ; названиепроцедуры endp

```

/ Вопрос 4: Ваша программа состоит из главной процедуры и процедур-подпрограмм. Каким может быть взаимное расположение главной процедуры и подпрограмм?


Язык программирования ассемблера поддерживает применение процедур двух типов – ближнего (near) и дальнего (far).

Процедуры ближнего типа должны находиться в том же сегменте, что и вызывающая программа. Дальний тип процедуры означает, что к ней можно обращаться из любого другого кодового сегмента.

В общем случае, размещать подпрограмму в теле программы можно где угодно, но принято размещать либо в конце сегмента кода, после команд завершения программы, либо в самом начале сегмента кода, перед точкой входа в программу (т.к. процедура не должна выполняться без её вызова). В больших программах подпрограммы часто размещают в отдельном кодовом сегменте.

Подытожим, взаимное расположение главной процедуры и процедур-подпрограмм может быть:
- в начале кода перед входом в программу;
- в сегменте кода внутри программы;
- в конце кода после завершения программы

/ Вопрос 5: Как процессор использует стек при работе с любой процедурой?

При вызове процедуры в стеке сохраняется адрес возврата в вызывающую программу:

- при вызове ближней процедуры – слово, содержащее смещение точки возврата относительно текущего кодового сегмента;

- при вызове дальней процедуры – слово, содержащее адрес сегмента, в котором расположена точка возврата, и слово, содержащее смещение точки возврата в этом сегменте


/ Вопрос 6: С помощью какой команды вызывается процедура? Как меняется значение регистра SP после вызова процедуры? Приведите пример из вашей таблицы трассировки.

Процедура вызыввается с помощью команды call. При вызове процедуры в стеке сохраняется адрес возврата в вызывающую программу. Приведём пример из трассировки первой программы: до вызова процедуры enter (название процедуры из программы 1) SP = FFFE, затем SP = FFFC, после завершения процедры SP становится вновь равен FFFE. SP уменьшается ровно на 2 байта во время вызова процедуры из-за сохранения адреса возврата в стеке.


/ Вопрос 7: После какой команды процедуры из стека извлекается адрес возврата?

Адрес возврата извлекается из стека после завершение работы процедуры командой ret.
