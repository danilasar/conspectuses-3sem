#set par(justify : true, first-line-indent: 2em)

/ Вопрос 1: Какой командой можно выделить в памяти место под одномерный массив байтов array размерностью 20?

#h(1cm)Для выделения памяти существуют директивы db, dw, dd, dq, dt, выделяющие, в зависимости от конкретной директивы, байт, слово, двойное слово... К ним применим оператор dup, позволяющий выделить несколько экземпляров:

```nasm Array DB 20 DUP (?) ``` 

(?) – ячейки выделенной памяти не будут инициализироваться конкретными значениями.

В результате выполнения вышеприведённой директивы будет выделено 20 байт памяти с начальным адресом под меткой ```Array```.

Перечислив значения через запятую, можно проинициализировать конкретные байты, слова, ...

/ Вопрос 2: Опишите команды умножения на байт и на слово.

#h(1.25cm)Для умножения значения регистра AL или AX (в зависимости от размерности второго множителя) на число используется инструкция mul или imul (в зависимости от знаковости, mul беззнаковый):  ``` mul <второй множитель>``` 

#h(1.25cm)В зависимости от разрядности результат (частное и остаток соответственно) помещаются либо в AX, либо в DX:AX.

/ Вопрос 3: Какое максимальное беззнаковое число можно хранить в элементе массива размером в 1 байт?

Число 255.

/ Вопрос 4: Пусть имеется массив: array DW 50 DUP(?). Для доступа к отдельным элементам массива используется адресное выражение array[SI]. Как называется этот способ адресации и как с его помощью будет вычисляться адрес элементов массива?

Прямая адресация с индексированием. array определяет начало массива, а значение в SI --- индекс элемента, прибавляющийся к адресу.

/ Вопрос 5: Каким образом осуществляется перебор элементов некоторого массива A с помощью адресного выражения A[SI], если массив состоит из байтов, слов или двойных слов?

Увеличивая значение SI в соответствии с размерностью элементов массива, эквивалентно i += sizeof a[0] в Си.

/ Вопрос 6: Для некоторого массива A каким будет результат выполнения команды mov DI, A и команды mov DI, offset A?

В первом случае в DI будет помещено значение элемента массива A, а во втором адрес элемента A.
```nasm mov DI, A``` работает со значением по адресу A; ```nasm mov DI, offset A``` работает непосредственно с адресом.

// С помощью команд арифметического сдвига (SAR, SHR, ROR, RCR), они выталкиваем младший бит числа в флаг CF, если он равен 1, то число нечётное, иначе оно чётное. (так происходит так как младший бит числа отвечает за 1, а все остальные биты за чётные числа)
// #set align(center)
// #table(
// columns: 5,
//   stroke: none,
//   inset: 2.5pt,
//   align: center,
//   table.hline(),
//   table.header(
//     [16],[8],[4],[2],[1],
//   ),
//   table.hline(),
//   table.vline(x: 0),
//   table.vline(x: 1),
//   table.vline(x: 2),
//   table.vline(x: 3),
//   table.vline(x: 4),
//   table.vline(x: 5),
//   [1], [0], [1], [0], [1],
//     table.hline(),
// )
// #set align(left)
// поэтому число будет нечётным, только если младший бит числа равен 1)
