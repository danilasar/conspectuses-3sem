Microsoft (R) Macro Assembler (x64) Version 14.29.30147.0   12/17/24 20:57:18
Z:\data\docs\sgu\code\lab8.asm				     Page 1 - 1


				extrn GetStdHandle:proc, WriteConsoleW:proc, ReadConsoleW:proc, lstrlenW:proc, wsprintfW:proc, ExitProcess:proc
 =-0000000B			STD_OUTPUT_HANDLE=-11
 =-0000000A			STD_INPUT_HANDLE=-10
 = 00007FFF			wMAX=32767
 =-00008000			wMIN=-32768
 = 00000400			BUF_SIZE=1024
 00000000			.data
				    ; a = 
 00000000 61 00 20 00 3D	    strA      db 61h, 00h, 20h, 00h, 3dh, 00h, 20h, 00h, 00h, 00h 
	   00 20 00 00 00
				    ; b = 
 0000000A 62 00 20 00 3D	    strB      db 62h, 00h, 20h, 00h, 3dh, 00h, 20h, 00h, 00h, 00h
	   00 20 00 00 00
				    ; 0x5D + %d - %d = %d (prefix)
 00000014 30 00 78 00 35	    strResult db 30h, 00h, 78h, 00h, 35h, 00h, 44h, 00h, 20h, 00h, 2bh, 00h, 20h, 00h, 25h, 00h, 64h, 00h, 20h, 00h, 2dh, 00h, 20h, 00h, 25h, 00h, 64h, 00h, 20h, 00h
	   00 44 00 20 00
	   2B 00 20 00 25
	   00 64 00 20 00
	   2D 00 20 00 25
	   00 64 00 20 00
 00000032  3D 00 20 00		              db 3dh, 00h, 20h, 00h 
 00000036 25 00 64 00 0A	    strNum    db 25h, 00h, 64h, 00h, 0ah, 00h, 00h, 00h
	   00 00 00
				
 0000003E 1C 04 38 04 3D	    strLowest db 1ch, 04h, 38h, 04h, 3dh, 04h, 38h, 04h, 3ch, 04h, 30h, 04h, 3bh, 04h, 4ch, 04h, 3dh, 04h, 3eh, 04h, 35h, 04h, 20h, 00h, 47h, 04h, 38h, 04h, 41h, 04h
	   04 38 04 3C 04
	   30 04 3B 04 4C
	   04 3D 04 3E 04
	   35 04 20 00 47
	   04 38 04 41 04
 0000005C  3B 04 3E 04 3A	              db 3bh, 04h, 3eh, 04h, 3ah, 00h, 20h, 00h, 00h, 00h
	   00 20 00 00 00
				
				    ; Ошибка ввода числа
 00000066 1E 04 48 04 38	    erStoi    db 1eh, 04h, 48h, 04h, 38h, 04h, 31h, 04h, 3ah, 04h, 30h, 04h, 20h, 00h, 32h, 04h, 32h, 04h, 3eh, 04h, 34h, 04h, 30h, 04h, 20h, 00h, 47h, 04h, 38h, 04h
	   04 31 04 3A 04
	   30 04 20 00 32
	   04 32 04 3E 04
	   34 04 30 04 20
	   00 47 04 38 04
 00000084  41 04 3B 04 30	              db 41h, 04h, 3bh, 04h, 30h, 04h, 0ah, 00h
	   04 0A 00
 0000008C  00 00		              db 00h, 00h
				    ; Введённый текст не является целым числом
 0000008E 12 04 32 04 35	    erNaN     db 12h, 04h, 32h, 04h, 35h, 04h, 34h, 04h, 51h, 04h, 3dh, 04h, 3dh, 04h, 4bh, 04h, 39h, 04h, 20h, 00h, 42h, 04h, 35h, 04h, 3ah, 04h, 41h, 04h, 42h, 04h
	   04 34 04 51 04
	   3D 04 3D 04 4B
	   04 39 04 20 00
	   42 04 35 04 3A
	   04 41 04 42 04
 000000AC  20 00 3D 04 35	              db 20h, 00h, 3dh, 04h, 35h, 04h, 20h, 00h, 4fh, 04h, 32h, 04h, 3bh, 04h, 4fh, 04h, 35h, 04h, 42h, 04h, 41h, 04h, 4fh, 04h, 20h, 00h, 46h, 04h, 35h, 04h
	   04 20 00 4F 04
	   32 04 3B 04 4F
	   04 35 04 42 04
	   41 04 4F 04 20
	   00 46 04 35 04
 000000CA  3B 04 4B 04 3C	              db 3bh, 04h, 4bh, 04h, 3ch, 04h, 20h, 00h, 47h, 04h, 38h, 04h, 41h, 04h, 3bh, 04h, 3eh, 04h, 3ch, 04h, 0ah, 00h
	   04 20 00 47 04
	   38 04 41 04 3B
	   04 3E 04 3C 04
	   0A 00
 000000E0  00 00		              db 00h, 00h
				    ; Число слишком велико по модулю для дальнейших вычислений
 000000E2 27 04 38 04 41	    erOver    db 27h, 04h, 38h, 04h, 41h, 04h, 3bh, 04h, 3eh, 04h, 20h, 00h, 41h, 04h, 3bh, 04h, 38h, 04h, 48h, 04h, 3ah, 04h, 3eh, 04h, 3ch, 04h, 20h, 00h, 32h, 04h
	   04 3B 04 3E 04
	   20 00 41 04 3B
	   04 38 04 48 04
	   3A 04 3E 04 3C
	   04 20 00 32 04
 00000100  35 04 3B 04 38	              db 35h, 04h, 3bh, 04h, 38h, 04h, 3ah, 04h, 3eh, 04h, 20h, 00h, 3fh, 04h, 3eh, 04h, 20h, 00h, 3ch, 04h, 3eh, 04h, 34h, 04h, 43h, 04h, 3bh, 04h, 4eh, 04h
	   04 3A 04 3E 04
	   20 00 3F 04 3E
	   04 20 00 3C 04
	   3E 04 34 04 43
	   04 3B 04 4E 04
 0000011E  20 00 34 04 3B	              db 20h, 00h, 34h, 04h, 3bh, 04h, 4fh, 04h, 20h, 00h, 34h, 04h, 30h, 04h, 3bh, 04h, 4ch, 04h, 3dh, 04h, 35h, 04h, 39h, 04h, 48h, 04h, 38h, 04h, 45h, 04h
	   04 4F 04 20 00
	   34 04 30 04 3B
	   04 4C 04 3D 04
	   35 04 39 04 48
	   04 38 04 45 04
 0000013C  20 00 32 04 4B	              db 20h, 00h, 32h, 04h, 4bh, 04h, 47h, 04h, 38h, 04h, 41h, 04h, 3bh, 04h, 35h, 04h, 3dh, 04h, 38h, 04h, 39h, 04h, 0ah, 00h
	   04 47 04 38 04
	   41 04 3B 04 35
	   04 3D 04 38 04
	   39 04 0A 00
 00000154  00 00		              db 00h, 00h
				
 00000156 0000			    varA      dw ?
 00000158 0000			    varB      dw ?
 0000015A			    varResult dq ?
	   0000000000000000
 00000162			    hCin      dq ?
	   0000000000000000
 0000016A			    hCout     dq ?
	   0000000000000000
 00000172  00000200 [		    buffer    dw BUF_SIZE / 2 dup (?)
	    0000
	   ]
 00000572			    bufLen    dq 0
	   0000000000000000
 0000057A			    number    dq ?
	   0000000000000000
				; 5Dh + A - B
 00000000			.code
 00000000			    initHandlers proc 
 00000000  50			        push rax
 00000001  51			        push rcx
 00000002  48/ 83 EC 08		        sub rsp, 8 
 00000006  48/ C7 C1		        mov rcx, STD_INPUT_HANDLE 
	   FFFFFFF6
 0000000D  E8 00000000 E	        call GetStdHandle
 00000012  48/ 89 05		        mov [hCin], rax
	   00000162 R
 00000019  48/ C7 C1		        mov rcx, STD_OUTPUT_HANDLE 
	   FFFFFFF5
 00000020  E8 00000000 E	        call GetStdHandle
 00000025  48/ 89 05		        mov [hCout], rax
	   0000016A R
 0000002C  48/ 83 C4 08		        add rsp, 8
 00000030  59			        pop rcx 
 00000031  58			        pop rax
 00000032  C3			        ret
 00000033			    initHandlers endp
 00000033			    flush proc
 00000033  50			        push rax
 00000034  51			        push rcx
 00000035  48/ 8D 05		        lea rax, buffer
	   00000172 R
 0000003C  48/ C7 C1		        mov rcx, BUF_SIZE 
	   00000400
 00000043			        clear_buffer:
 00000043  88 14 08		            mov [rax + rcx], dl
 00000046  E2 FB		            loop clear_buffer
 00000048  59			        pop rcx
 00000049  58			        pop rax 
 0000004A  C3			        ret
 0000004B			    flush endp
 0000004B			    cout proc 
 0000004B  50			        push rax
 0000004C  51			        push rcx
 0000004D  52			        push rdx
 0000004E  41/ 50		        push r8 
 00000050  41/ 51		        push r9
 00000052  48/ 83 EC 28		        sub rsp, 28h
 00000056  48/ 8B D1		        mov rdx, rcx
 00000059  E8 00000000 E	        call lstrlenW 
 0000005E  4C/ 8B C0		        mov r8, rax
 00000061  48/ 8B 0D		        mov rcx, hCout 
	   0000016A R
 00000068  4D/ 33 C9		        xor r9, r9
 0000006B  E8 00000000 E	        call WriteConsoleW
 00000070  48/ 83 C4 28		        add rsp, 28h
 00000074  41/ 59		        pop r9
 00000076  41/ 58		        pop r8
 00000078  5A			        pop rdx
 00000079  59			        pop rcx
 0000007A  58			        pop rax
 0000007B  C3			        ret
 0000007C			    cout endp
 0000007C			    cin proc 
 0000007C  51			        push rcx
 0000007D  52			        push rdx
 0000007E  41/ 50		        push r8
 00000080  41/ 51		        push r9
 00000082  48/ 83 EC 28		        sub rsp, 28h
 00000086  48/ 8D 05		        lea rax, buffer
	   00000172 R
 0000008D  32 D2		        xor dl, dl
 0000008F  E8 FFFFFF9F		        call flush
 00000094  48/ 8B 0D		        mov rcx, hCin
	   00000162 R
 0000009B  48/ 8D 15		        lea rdx, buffer
	   00000172 R
 000000A2  49/ C7 C0		        mov r8, BUF_SIZE
	   00000400
 000000A9  4C/ 8D 0D		        lea r9, bufLen
	   00000572 R
 000000B0  E8 00000000 E	        call ReadConsoleW
 000000B5  48/ 8B 05		        mov rax, bufLen
	   00000572 R
 000000BC  48/ 83 E8 02		        sub rax, 2
 000000C0  48/ 89 05		        mov bufLen, rax
	   00000572 R
 000000C7  48/ 83 C4 28		        add rsp, 28h
 000000CB  41/ 59		        pop r9
 000000CD  41/ 58		        pop r8
 000000CF  5A			        pop rdx
 000000D0  59			        pop rcx
 000000D1  C3			        ret
 000000D2			    cin endp
				
 000000D2			    stoi proc
				    local num:word, sign:byte, i:byte, digit:word
 000000DA  53			        push rbx
 000000DB  51			        push rcx
 000000DC  52			        push rdx
 000000DD  41/ 50		        push r8
 000000DF  41/ 51		        push r9
 000000E1  55			        push rbp
 000000E2  66| C7 45 FE		        mov num,0
	   0000
 000000E8  C6 45 FD 01		        mov sign,1
 000000EC  C6 45 FC 00		        mov i,0
 000000F0			        skip_leading_space:
 000000F0  48/ 8B 05		            mov rax,bufLen
	   00000572 R
 000000F7  38 45 FC		            cmp i,al  
 000000FA  0F 83 00000156	        jae parse_nan_error
 00000100  48/ 8D 05		            lea rax,buffer
	   00000172 R
 00000107  48/ 0F B6 4D		            movzx rcx,i
	   FC
 0000010C  66| 8B 04 48		            mov ax, word ptr [rax+rcx*2]  
 00000110  66| BB 0020		            mov bx, 20h
 00000114  66| 3B C3		            cmp ax, bx  
 00000117  75 07		        jne check_for_sign
 00000119  FE C1		            inc cl
 0000011B  88 4D FC		            mov i,cl
 0000011E  EB D0		        jmp skip_leading_space
 00000120			        check_for_sign:
 00000120  48/ 63 05		            movsxd rax,dword ptr [bufLen]  
	   00000572 R
 00000127  38 45 FC		            cmp i,al
 0000012A  0F 83 00000126	            jae parse_nan_error
 00000130  48/ 8D 05		                lea rax, buffer
	   00000172 R
 00000137  48/ 0F B6 4D		                movzx rcx,i  
	   FC
 0000013C  66| 0F B6 14 48	                movzx dx,byte ptr [rax+rcx*2]  
 00000141  66| BB 002D		                mov bx,2Dh
 00000145  66| 3B D3		                cmp dx,bx
 00000148  74 09		                je change_sign
 0000014A  66| BB 002B		                    mov bx,2Bh
 0000014E  66| 3B D3		                    cmp dx,bx  
 00000151  75 2A		                    jne convert_to_int
 00000153			                change_sign:
 00000153  48/ 8D 05		                    lea rax, buffer
	   00000172 R
 0000015A  48/ 0F B6 4D		                    movzx rcx,i
	   FC
 0000015F  66| 8B 14 48		                    mov dx,word ptr [rax+rcx*2]  
 00000163  66| BB 002D		                    mov bx,2Dh
 00000167  66| 3B D3		                    cmp dx,bx  
 0000016A  75 04		                    jne its_plus
 0000016C  B2 FF		                        mov dl,-1
 0000016E  EB 02		                        jmp its_minus
 00000170			                    its_plus:
 00000170  B2 01		                        mov dl,1  
 00000172			                    its_minus:
 00000172  88 55 FD		                    mov sign,dl  
 00000175  8A 45 FC		                    mov al,i
 00000178  FE C0		                    inc al
 0000017A  88 45 FC		                    mov i,al
 0000017D			        convert_to_int:
 0000017D  48/ 63 05		            movsxd rax,dword ptr [bufLen]  
	   00000572 R
 00000184  38 45 FC		            cmp i,al
 00000187  0F 83 000000B3	            jae apply_sign_and_return
 0000018D  48/ 8D 05		                lea rax,buffer
	   00000172 R
 00000194  48/ 0F B6 4D		                movzx rcx,i
	   FC
 00000199  66| 8B 04 48		                mov ax,word ptr [rax+rcx*2]  
 0000019D  66| 85 C0		                test ax,ax  
 000001A0  0F 84 0000009A	            je apply_sign_and_return
 000001A6  48/ 8D 05		            lea rax,buffer
	   00000172 R
 000001AD  48/ 0F B6 4D		            movzx rcx,i
	   FC
 000001B2  66| 8B 04 48		            mov ax,word ptr [rax+rcx*2]  
 000001B6  66| BB 0020		            mov bx, 20h
 000001BA  66| 3B C3		            cmp ax,bx
 000001BD  75 0A		            jne check_is_digit
 000001BF  8A 4D FC		                mov cl, i 
 000001C2  FE C1		                inc cl
 000001C4  88 4D FC		                mov i, cl
 000001C7  EB B4		                jmp convert_to_int
 000001C9			            check_is_digit:
 000001C9  48/ 8D 05		            lea rax,buffer
	   00000172 R
 000001D0  48/ 0F B6 4D		            movzx rcx,i
	   FC
 000001D5  66| 8B 04 48		            mov ax,word ptr [rax+rcx*2]  
 000001D9  66| BA 0030		            mov dx, 30h
 000001DD  66| 3B C2		            cmp ax, dx
 000001E0  7C 74		            jl parse_nan_error
 000001E2  66| BA 0039		            mov dx, 39h
 000001E6  66| 3B C2		            cmp ax, dx
 000001E9  7F 6B		            jg parse_nan_error
 000001EB			            char_to_dword:
 000001EB  48/ 8D 05		            lea rax,buffer
	   00000172 R
 000001F2  48/ 0F B6 4D		            movzx rcx,i
	   FC
 000001F7  66| 8B 04 48		            mov ax,word ptr [rax+rcx*2]
 000001FB  66| 83 E8 30		            sub ax,30h
 000001FF  66| 89 45 FA		            mov digit,ax  
 00000203  66| BB 0CCC		            mov bx, wMAX / 10
 00000207  66| 39 5D FE		            cmp num,bx
 0000020B  7F 49		            jg parse_nan_error
 0000020D  66| 39 5D FE		            cmp num,bx
 00000211  75 0A		            jne build_number
 00000213  66| BB 0007		                mov bx, 7
 00000217  66| 39 5D FA		                cmp digit,bx
 0000021B  7F 42		                jg parse_overflow_error
 0000021D			            build_number:
 0000021D  66| 8B 45 FE		            mov ax, num
 00000221  66| BB 000A		            mov bx, 0Ah
 00000225  66| F7 EB		            imul bx
 00000228  66| 8B 5D FA		            mov bx, digit
 0000022C  66| 03 C3		            add ax, bx
 0000022F  66| 89 45 FE		            mov num,ax  
 00000233  8A 45 FC		            mov al,i
 00000236  FE C0		            inc al
 00000238  88 45 FC		            mov i,al
 0000023B  E9 FFFFFF3D		            jmp convert_to_int
 00000240			        apply_sign_and_return:
 00000240  66| 8B 45 FE		            mov ax, num
 00000244  66| 0F BE 5D		            movsx bx, sign
	   FD
 00000249  66| 0F AF C3		            imul ax, bx
 0000024D  41/ 59		            pop r9
 0000024F  41/ 58		            pop r8
 00000251  5A			            pop rdx
 00000252  59			            pop rcx
 00000253  5B			            pop rbx
				            ret
 00000256			        parse_nan_error:
 00000256  48/ 8D 0D		            lea rcx, erNaN
	   0000008E R
 0000025D  EB 07		            jmp parse_error
 0000025F			        parse_overflow_error:
 0000025F  48/ 8D 0D		            lea rcx, erOver
	   000000E2 R
 00000266			        parse_error:
 00000266  E8 FFFFFDE0		            call cout
 0000026B  48/ 33 C9		            xor rcx, rcx 
 0000026E  E8 00000000 E	            call ExitProcess
				            ret
				        ret 
 00000277			    stoi endp
				
 00000277			    input proc
 00000277  50			        push rax
 00000278  51			        push rcx
 00000279  48/ 83 EC 08		        sub rsp, 8
 0000027D  48/ 8D 0D		        lea rcx, strA
	   00000000 R
 00000284  E8 FFFFFDC2		        call cout
 00000289  E8 FFFFFDEE		        call cin
 0000028E  E8 FFFFFE3F		        call stoi
 00000293  66| 89 05		        mov varA, ax
	   00000156 R
				
 0000029A  48/ 8D 0D		        lea rcx, strB
	   0000000A R
 000002A1  E8 FFFFFDA5		        call cout
 000002A6  E8 FFFFFDD1		        call cin
 000002AB  E8 FFFFFE22		        call stoi 
 000002B0  66| 89 05		        mov varB, ax
	   00000158 R
 000002B7  48/ 83 C4 08		        add rsp, 8
 000002BB  58			        pop rax 
 000002BC  59			        pop rcx
 000002BD  C3			        ret
 000002BE			    input endp
 000002BE			    calc proc
 000002BE  50			        push rax
 000002BF  53			        push rbx
 000002C0  51			        push rcx
 000002C1  48/ 83 EC 08		        sub rsp, 8 
 000002C5  48/ C7 C0		        mov rax, 5Dh
	   0000005D
 000002CC  48/ 0F BF 1D		        movsx rbx, varA 
	   00000156 R
 000002D4  48/ 0F BF 0D		        movsx rcx, varB
	   00000158 R
 000002DC  48/ 03 C3		        add rax, rbx
 000002DF  48/ 2B C1		        sub rax, rcx
 000002E2  48/ 89 05		        mov varResult, rax
	   0000015A R
 000002E9  48/ 83 C4 08		        add rsp, 8
 000002ED  59			        pop rcx
 000002EE  5B			        pop rbx
 000002EF  58			        pop rax
 000002F0  C3			        ret
 000002F1			    calc endp 
 000002F1			    output proc 
 000002F1  50			        push rax
 000002F2  53			        push rbx
 000002F3  51			        push rcx
 000002F4  52			        push rdx
 000002F5  41/ 50		        push r8
 000002F7  41/ 51		        push r9
 000002F9  48/ 83 EC 30		        sub rsp, 30h
 000002FD  48/ 8B 1D		        mov rbx, varResult
	   0000015A R
 00000304  48/ 89 5C 24		        mov [rsp + 20h], rbx
	   20
 00000309  48/ 8D 0D		        lea rcx, buffer
	   00000172 R
 00000310  48/ 8D 15		        lea rdx, strResult
	   00000014 R
 00000317  4C/ 0F BF 05		        movsx r8, varA
	   00000156 R
 0000031F  4C/ 0F BF 0D		        movsx r9, varB
	   00000158 R
 00000327  E8 00000000 E	        call wsprintfW
				
 0000032C  48/ 8D 0D		        lea rcx, buffer 
	   00000172 R
 00000333  E8 FFFFFD13		        call cout
				
 00000338  48/ 8D 0D		        lea rcx, strLowest 
	   0000003E R
 0000033F  E8 FFFFFD07		        call cout
				
 00000344  E8 FFFFFCEA		        call flush
 00000349  48/ 33 D2		        xor rdx, rdx
 0000034C  66| 8B 15		        mov dx, varA
	   00000156 R
 00000353  66| 44/ 8B 05	        mov r8w, varB
	   00000158 R
 0000035B  66| 41/ 3B D0	        cmp dx, r8w
 0000035F  7F 16		        jg b_is_lower
 00000361  48/ 8D 0D		            lea rcx, strA 
	   00000000 R
 00000368  E8 FFFFFCDE		            call cout
 0000036D  4C/ 0F BF 05		            movsx r8, varA
	   00000156 R
 00000375  EB 14		            jmp cout_lowerest
 00000377			        b_is_lower: 
 00000377  48/ 8D 0D		            lea rcx, strB 
	   0000000A R
 0000037E  E8 FFFFFCC8		            call cout
 00000383  4C/ 0F BF 05		            movsx r8, varB 
	   00000158 R
 0000038B			        cout_lowerest:
 0000038B  48/ 8D 0D		        lea rcx, buffer
	   00000172 R
 00000392  48/ 8D 15		        lea rdx, strNum
	   00000036 R
 00000399  E8 00000000 E	        call wsprintfW
 0000039E  48/ 8D 0D		        lea rcx, buffer 
	   00000172 R
 000003A5  E8 FFFFFCA1		        call cout 
 000003AA  48/ 83 C4 30		        add rsp, 30h
 000003AE  41/ 59		        pop r9
 000003B0  41/ 58		        pop r8
 000003B2  5A			        pop rdx
 000003B3  59			        pop rcx
 000003B4  5B			        pop rbx
 000003B5  58			        pop rax
 000003B6  C3			        ret
 000003B7			    output endp
 000003B7			    mainCRTStartup proc
 000003B7  55			        push rbp 
 000003B8  E8 FFFFFC43		        call initHandlers
				
 000003BD  E8 FFFFFEB5		        call input
 000003C2  E8 FFFFFEF7		        call calc
 000003C7  E8 FFFFFF25		        call output
				        
 000003CC  48/ 33 C9		        xor rcx, rcx 
 000003CF  E8 00000000 E	        call ExitProcess
 000003D4  5D			        pop rbp
 000003D5  C3			        ret
 000003D6			    mainCRTStartup endp
				end
Microsoft (R) Macro Assembler (x64) Version 14.29.30147.0   12/17/24 20:57:18
Z:\data\docs\sgu\code\lab8.asm				     Symbols 2 - 1




Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

calc . . . . . . . . . . . . . .	P 	 000002BE _TEXT	Length= 00000033 Public
cin  . . . . . . . . . . . . . .	P 	 0000007C _TEXT	Length= 00000056 Public
cout . . . . . . . . . . . . . .	P 	 0000004B _TEXT	Length= 00000031 Public
flush  . . . . . . . . . . . . .	P 	 00000033 _TEXT	Length= 00000018 Public
  clear_buffer . . . . . . . . .	L 	 00000043 _TEXT	
initHandlers . . . . . . . . . .	P 	 00000000 _TEXT	Length= 00000033 Public
input  . . . . . . . . . . . . .	P 	 00000277 _TEXT	Length= 00000047 Public
mainCRTStartup . . . . . . . . .	P 	 000003B7 _TEXT	Length= 0000001F Public
output . . . . . . . . . . . . .	P 	 000002F1 _TEXT	Length= 000000C6 Public
  b_is_lower . . . . . . . . . .	L 	 00000377 _TEXT	
  cout_lowerest  . . . . . . . .	L 	 0000038B _TEXT	
stoi . . . . . . . . . . . . . .	P 	 000000D2 _TEXT	Length= 000001A5 Public
  num  . . . . . . . . . . . . .	Word	 rbp - 00000002
  sign . . . . . . . . . . . . .	Byte	 rbp - 00000003
  i  . . . . . . . . . . . . . .	Byte	 rbp - 00000004
  digit  . . . . . . . . . . . .	Word	 rbp - 00000006
  skip_leading_space . . . . . .	L 	 000000F0 _TEXT	
  check_for_sign . . . . . . . .	L 	 00000120 _TEXT	
  change_sign  . . . . . . . . .	L 	 00000153 _TEXT	
  its_plus . . . . . . . . . . .	L 	 00000170 _TEXT	
  its_minus  . . . . . . . . . .	L 	 00000172 _TEXT	
  convert_to_int . . . . . . . .	L 	 0000017D _TEXT	
  check_is_digit . . . . . . . .	L 	 000001C9 _TEXT	
  char_to_dword  . . . . . . . .	L 	 000001EB _TEXT	
  build_number . . . . . . . . .	L 	 0000021D _TEXT	
  apply_sign_and_return  . . . .	L 	 00000240 _TEXT	
  parse_nan_error  . . . . . . .	L 	 00000256 _TEXT	
  parse_overflow_error . . . . .	L 	 0000025F _TEXT	
  parse_error  . . . . . . . . .	L 	 00000266 _TEXT	


Symbols:

                N a m e                 Type     Value    Attr

BUF_SIZE . . . . . . . . . . . .	Number	 00000400h   
ExitProcess  . . . . . . . . . .	L 	 00000000 External
GetStdHandle . . . . . . . . . .	L 	 00000000 External
ReadConsoleW . . . . . . . . . .	L 	 00000000 External
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
WriteConsoleW  . . . . . . . . .	L 	 00000000 External
bufLen . . . . . . . . . . . . .	QWord	 00000572 _DATA	
buffer . . . . . . . . . . . . .	Word	 00000172 _DATA	
erNaN  . . . . . . . . . . . . .	Byte	 0000008E _DATA	
erOver . . . . . . . . . . . . .	Byte	 000000E2 _DATA	
erStoi . . . . . . . . . . . . .	Byte	 00000066 _DATA	
hCin . . . . . . . . . . . . . .	QWord	 00000162 _DATA	
hCout  . . . . . . . . . . . . .	QWord	 0000016A _DATA	
lstrlenW . . . . . . . . . . . .	L 	 00000000 External
number . . . . . . . . . . . . .	QWord	 0000057A _DATA	
strA . . . . . . . . . . . . . .	Byte	 00000000 _DATA	
strB . . . . . . . . . . . . . .	Byte	 0000000A _DATA	
strLowest  . . . . . . . . . . .	Byte	 0000003E _DATA	
strNum . . . . . . . . . . . . .	Byte	 00000036 _DATA	
strResult  . . . . . . . . . . .	Byte	 00000014 _DATA	
varA . . . . . . . . . . . . . .	Word	 00000156 _DATA	
varB . . . . . . . . . . . . . .	Word	 00000158 _DATA	
varResult  . . . . . . . . . . .	QWord	 0000015A _DATA	
wMAX . . . . . . . . . . . . . .	Number	 00007FFFh   
wMIN . . . . . . . . . . . . . .	Number	 -00008000h   
wsprintfW  . . . . . . . . . . .	L 	 00000000 External

	   0 Warnings
	   0 Errors
