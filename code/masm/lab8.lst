Microsoft (R) Macro Assembler (x64) Version 14.29.30147.0   12/18/24 11:10:59
Z:\data\docs\sgu\code\masm\lab8.asm			     Page 1 - 1


				extrn GetStdHandle:proc, WriteConsoleW:proc, ReadConsoleW:proc, lstrlenW:proc, wsprintfW:proc, ExitProcess:proc
 =-0000000B			STD_OUTPUT_HANDLE=-11
 =-0000000A			STD_INPUT_HANDLE=-10
 = 00007FFF			wMAX=32767
 =-00008000			wMIN=-32768
 = 00000400			BUF_SIZE=1024
 00000000			.data
				    ; a = 
 00000000 61 00 20 00 3D	    strA      db 61h, 00h, 20h, 00h, 3dh, 00h, 20h, 00h, 00h, 00h 
	   00 20 00 00 00
				    ; b = 
 0000000A 62 00 20 00 3D	    strB      db 62h, 00h, 20h, 00h, 3dh, 00h, 20h, 00h, 00h, 00h
	   00 20 00 00 00
				    ; 0x5D + %d - %d = %d (prefix)
 00000014 30 00 78 00 35	    strResult db 30h, 00h, 78h, 00h, 35h, 00h, 44h, 00h, 20h, 00h, 2bh, 00h, 20h, 00h, 25h, 00h, 64h, 00h, 20h, 00h, 2dh, 00h, 20h, 00h, 25h, 00h, 64h, 00h, 20h, 00h
	   00 44 00 20 00
	   2B 00 20 00 25
	   00 64 00 20 00
	   2D 00 20 00 25
	   00 64 00 20 00
 00000032  3D 00 20 00		              db 3dh, 00h, 20h, 00h 
 00000036 25 00 64 00 0A	    strNum    db 25h, 00h, 64h, 00h, 0ah, 00h, 00h, 00h
	   00 00 00
				
 0000003E 1C 04 38 04 3D	    strLowest db 1ch, 04h, 38h, 04h, 3dh, 04h, 38h, 04h, 3ch, 04h, 30h, 04h, 3bh, 04h, 4ch, 04h, 3dh, 04h, 3eh, 04h, 35h, 04h, 20h, 00h, 47h, 04h, 38h, 04h, 41h, 04h
	   04 38 04 3C 04
	   30 04 3B 04 4C
	   04 3D 04 3E 04
	   35 04 20 00 47
	   04 38 04 41 04
 0000005C  3B 04 3E 04 3A	              db 3bh, 04h, 3eh, 04h, 3ah, 00h, 20h, 00h, 00h, 00h
	   00 20 00 00 00
				
				    ; Ошибка ввода числа
 00000066 1E 04 48 04 38	    erStoi    db 1eh, 04h, 48h, 04h, 38h, 04h, 31h, 04h, 3ah, 04h, 30h, 04h, 20h, 00h, 32h, 04h, 32h, 04h, 3eh, 04h, 34h, 04h, 30h, 04h, 20h, 00h, 47h, 04h, 38h, 04h
	   04 31 04 3A 04
	   30 04 20 00 32
	   04 32 04 3E 04
	   34 04 30 04 20
	   00 47 04 38 04
 00000084  41 04 3B 04 30	              db 41h, 04h, 3bh, 04h, 30h, 04h, 0ah, 00h
	   04 0A 00
 0000008C  00 00		              db 00h, 00h
				    ; Введённый текст не является целым числом
 0000008E 12 04 32 04 35	    erNaN     db 12h, 04h, 32h, 04h, 35h, 04h, 34h, 04h, 51h, 04h, 3dh, 04h, 3dh, 04h, 4bh, 04h, 39h, 04h, 20h, 00h, 42h, 04h, 35h, 04h, 3ah, 04h, 41h, 04h, 42h, 04h
	   04 34 04 51 04
	   3D 04 3D 04 4B
	   04 39 04 20 00
	   42 04 35 04 3A
	   04 41 04 42 04
 000000AC  20 00 3D 04 35	              db 20h, 00h, 3dh, 04h, 35h, 04h, 20h, 00h, 4fh, 04h, 32h, 04h, 3bh, 04h, 4fh, 04h, 35h, 04h, 42h, 04h, 41h, 04h, 4fh, 04h, 20h, 00h, 46h, 04h, 35h, 04h
	   04 20 00 4F 04
	   32 04 3B 04 4F
	   04 35 04 42 04
	   41 04 4F 04 20
	   00 46 04 35 04
 000000CA  3B 04 4B 04 3C	              db 3bh, 04h, 4bh, 04h, 3ch, 04h, 20h, 00h, 47h, 04h, 38h, 04h, 41h, 04h, 3bh, 04h, 3eh, 04h, 3ch, 04h, 0ah, 00h
	   04 20 00 47 04
	   38 04 41 04 3B
	   04 3E 04 3C 04
	   0A 00
 000000E0  00 00		              db 00h, 00h
				    ; Число слишком велико по модулю для дальнейших вычислений
 000000E2 27 04 38 04 41	    erOver    db 27h, 04h, 38h, 04h, 41h, 04h, 3bh, 04h, 3eh, 04h, 20h, 00h, 41h, 04h, 3bh, 04h, 38h, 04h, 48h, 04h, 3ah, 04h, 3eh, 04h, 3ch, 04h, 20h, 00h, 32h, 04h
	   04 3B 04 3E 04
	   20 00 41 04 3B
	   04 38 04 48 04
	   3A 04 3E 04 3C
	   04 20 00 32 04
 00000100  35 04 3B 04 38	              db 35h, 04h, 3bh, 04h, 38h, 04h, 3ah, 04h, 3eh, 04h, 20h, 00h, 3fh, 04h, 3eh, 04h, 20h, 00h, 3ch, 04h, 3eh, 04h, 34h, 04h, 43h, 04h, 3bh, 04h, 4eh, 04h
	   04 3A 04 3E 04
	   20 00 3F 04 3E
	   04 20 00 3C 04
	   3E 04 34 04 43
	   04 3B 04 4E 04
 0000011E  20 00 34 04 3B	              db 20h, 00h, 34h, 04h, 3bh, 04h, 4fh, 04h, 20h, 00h, 34h, 04h, 30h, 04h, 3bh, 04h, 4ch, 04h, 3dh, 04h, 35h, 04h, 39h, 04h, 48h, 04h, 38h, 04h, 45h, 04h
	   04 4F 04 20 00
	   34 04 30 04 3B
	   04 4C 04 3D 04
	   35 04 39 04 48
	   04 38 04 45 04
 0000013C  20 00 32 04 4B	              db 20h, 00h, 32h, 04h, 4bh, 04h, 47h, 04h, 38h, 04h, 41h, 04h, 3bh, 04h, 35h, 04h, 3dh, 04h, 38h, 04h, 39h, 04h, 0ah, 00h
	   04 47 04 38 04
	   41 04 3B 04 35
	   04 3D 04 38 04
	   39 04 0A 00
 00000154  00 00		              db 00h, 00h
				
 00000156 0000			    varA      dw ?
 00000158 0000			    varB      dw ?
 0000015A			    varResult dq ?
	   0000000000000000
 00000162			    hCin      dq ?
	   0000000000000000
 0000016A			    hCout     dq ?
	   0000000000000000
 00000172  00000200 [		    buffer    dw BUF_SIZE / 2 dup (?)
	    0000
	   ]
 00000572			    bufLen    dq 0
	   0000000000000000
 0000057A			    number    dq ?
	   0000000000000000
				; 5Dh + A - B
 00000000			.code
 00000000			    initHandlers proc 
 00000000  50			        push rax
 00000001  51			        push rcx
 00000002  48/ 83 EC 08		        sub rsp, 8 
 00000006  48/ C7 C1		        mov rcx, STD_INPUT_HANDLE 
	   FFFFFFF6
 0000000D  E8 00000000 E	        call GetStdHandle
 00000012  48/ 89 05		        mov [hCin], rax
	   00000162 R
 00000019  48/ C7 C1		        mov rcx, STD_OUTPUT_HANDLE 
	   FFFFFFF5
 00000020  E8 00000000 E	        call GetStdHandle
 00000025  48/ 89 05		        mov [hCout], rax
	   0000016A R
 0000002C  48/ 83 C4 08		        add rsp, 8
 00000030  59			        pop rcx 
 00000031  58			        pop rax
 00000032  C3			        ret
 00000033			    initHandlers endp
 00000033			    flush proc
 00000033  50			        push rax
 00000034  51			        push rcx
 00000035  48/ 8D 05		        lea rax, buffer
	   00000172 R
 0000003C  48/ C7 C1		        mov rcx, BUF_SIZE 
	   00000400
 00000043			        clear_buffer:
 00000043  88 14 08		            mov [rax + rcx], dl
 00000046  E2 FB		            loop clear_buffer
 00000048  59			        pop rcx
 00000049  58			        pop rax 
 0000004A  C3			        ret
 0000004B			    flush endp
 0000004B			    cout proc 
 0000004B  50			        push rax
 0000004C  51			        push rcx
 0000004D  52			        push rdx
 0000004E  41/ 50		        push r8 
 00000050  41/ 51		        push r9
 00000052  48/ 83 EC 28		        sub rsp, 28h
 00000056  48/ 8B D1		        mov rdx, rcx
 00000059  E8 00000000 E	        call lstrlenW 
 0000005E  4C/ 8B C0		        mov r8, rax
 00000061  48/ 8B 0D		        mov rcx, hCout 
	   0000016A R
 00000068  4D/ 33 C9		        xor r9, r9
 0000006B  E8 00000000 E	        call WriteConsoleW
 00000070  48/ 83 C4 28		        add rsp, 28h
 00000074  41/ 59		        pop r9
 00000076  41/ 58		        pop r8
 00000078  5A			        pop rdx
 00000079  59			        pop rcx
 0000007A  58			        pop rax
 0000007B  C3			        ret
 0000007C			    cout endp
 0000007C			    cin proc 
 0000007C  51			        push rcx
 0000007D  52			        push rdx
 0000007E  41/ 50		        push r8
 00000080  41/ 51		        push r9
 00000082  48/ 83 EC 28		        sub rsp, 28h
 00000086  48/ 8D 05		        lea rax, buffer
	   00000172 R
 0000008D  32 D2		        xor dl, dl
 0000008F  E8 FFFFFF9F		        call flush
 00000094  48/ 8B 0D		        mov rcx, hCin
	   00000162 R
 0000009B  48/ 8D 15		        lea rdx, buffer
	   00000172 R
 000000A2  49/ C7 C0		        mov r8, BUF_SIZE
	   00000400
 000000A9  4C/ 8D 0D		        lea r9, bufLen
	   00000572 R
 000000B0  E8 00000000 E	        call ReadConsoleW
 000000B5  48/ 8B 05		        mov rax, bufLen
	   00000572 R
 000000BC  48/ 83 E8 02		        sub rax, 2
 000000C0  48/ 89 05		        mov bufLen, rax
	   00000572 R
 000000C7  48/ 83 C4 28		        add rsp, 28h
 000000CB  41/ 59		        pop r9
 000000CD  41/ 58		        pop r8
 000000CF  5A			        pop rdx
 000000D0  59			        pop rcx
 000000D1  C3			        ret
 000000D2			    cin endp
				
 000000D2			    stoi proc
				    local num:word, sign:byte, i:byte, digit:word
 000000DA  53			        push rbx
 000000DB  51			        push rcx
 000000DC  52			        push rdx
 000000DD  41/ 50		        push r8
 000000DF  41/ 51		        push r9
 000000E1  55			        push rbp
 000000E2  66| C7 45 FE		        mov num,0
	   0000
 000000E8  C6 45 FD 01		        mov sign,1
 000000EC  C6 45 FC 00		        mov i,0
 000000F0			        skip_leading_space:
 000000F0  48/ 8B 05		            mov rax,bufLen
	   00000572 R
 000000F7  38 45 FC		            cmp i,al  
 000000FA  0F 83 00000155	        jae parse_nan_error
 00000100  48/ 8D 05		            lea rax,buffer
	   00000172 R
 00000107  48/ 0F B6 4D		            movzx rcx,i
	   FC
 0000010C  66| 8B 04 48		            mov ax, word ptr [rax+rcx*2]  
 00000110  66| BB 0020		            mov bx, 20h
 00000114  66| 3B C3		            cmp ax, bx  
 00000117  75 07		        jne check_for_sign
 00000119  FE C1		            inc cl
 0000011B  88 4D FC		            mov i,cl
 0000011E  EB D0		        jmp skip_leading_space
 00000120			        check_for_sign:
 00000120  48/ 63 05		            movsxd rax,dword ptr [bufLen]  
	   00000572 R
 00000127  38 45 FC		            cmp i,al
 0000012A  0F 83 00000125	            jae parse_nan_error
 00000130  48/ 8D 05		                lea rax, buffer
	   00000172 R
 00000137  48/ 0F B6 4D		                movzx rcx,i  
	   FC
 0000013C  66| 8B 14 48		                mov dx,word ptr [rax+rcx*2]  
 00000140  66| BB 002D		                mov bx,2Dh
 00000144  66| 3B D3		                cmp dx,bx
 00000147  74 09		                je change_sign
 00000149  66| BB 002B		                    mov bx,2Bh
 0000014D  66| 3B D3		                    cmp dx,bx  
 00000150  75 2A		                    jne convert_to_int
 00000152			                change_sign:
 00000152  48/ 8D 05		                    lea rax, buffer
	   00000172 R
 00000159  48/ 0F B6 4D		                    movzx rcx,i
	   FC
 0000015E  66| 8B 14 48		                    mov dx,word ptr [rax+rcx*2]  
 00000162  66| BB 002D		                    mov bx,2Dh
 00000166  66| 3B D3		                    cmp dx,bx  
 00000169  75 04		                    jne its_plus
 0000016B  B2 FF		                        mov dl,-1
 0000016D  EB 02		                        jmp its_minus
 0000016F			                    its_plus:
 0000016F  B2 01		                        mov dl,1  
 00000171			                    its_minus:
 00000171  88 55 FD		                    mov sign,dl  
 00000174  8A 45 FC		                    mov al,i
 00000177  FE C0		                    inc al
 00000179  88 45 FC		                    mov i,al
 0000017C			        convert_to_int:
 0000017C  48/ 63 05		            movsxd rax,dword ptr [bufLen]  
	   00000572 R
 00000183  38 45 FC		            cmp i,al
 00000186  0F 83 000000B3	            jae apply_sign_and_return
 0000018C  48/ 8D 05		                lea rax,buffer
	   00000172 R
 00000193  48/ 0F B6 4D		                movzx rcx,i
	   FC
 00000198  66| 8B 04 48		                mov ax,word ptr [rax+rcx*2]  
 0000019C  66| 85 C0		                test ax,ax  
 0000019F  0F 84 0000009A	            je apply_sign_and_return
 000001A5  48/ 8D 05		            lea rax,buffer
	   00000172 R
 000001AC  48/ 0F B6 4D		            movzx rcx,i
	   FC
 000001B1  66| 8B 04 48		            mov ax,word ptr [rax+rcx*2]  
 000001B5  66| BB 0020		            mov bx, 20h
 000001B9  66| 3B C3		            cmp ax,bx
 000001BC  75 0A		            jne check_is_digit
 000001BE  8A 4D FC		                mov cl, i 
 000001C1  FE C1		                inc cl
 000001C3  88 4D FC		                mov i, cl
 000001C6  EB B4		                jmp convert_to_int
 000001C8			            check_is_digit:
 000001C8  48/ 8D 05		            lea rax,buffer
	   00000172 R
 000001CF  48/ 0F B6 4D		            movzx rcx,i
	   FC
 000001D4  66| 8B 04 48		            mov ax,word ptr [rax+rcx*2]  
 000001D8  66| BA 0030		            mov dx, 30h
 000001DC  66| 3B C2		            cmp ax, dx
 000001DF  7C 74		            jl parse_nan_error
 000001E1  66| BA 0039		            mov dx, 39h
 000001E5  66| 3B C2		            cmp ax, dx
 000001E8  7F 6B		            jg parse_nan_error
 000001EA			            char_to_dword:
 000001EA  48/ 8D 05		            lea rax,buffer
	   00000172 R
 000001F1  48/ 0F B6 4D		            movzx rcx,i
	   FC
 000001F6  66| 8B 04 48		            mov ax,word ptr [rax+rcx*2]
 000001FA  66| 83 E8 30		            sub ax,30h
 000001FE  66| 89 45 FA		            mov digit,ax  
 00000202  66| BB 0CCC		            mov bx, wMAX / 10
 00000206  66| 39 5D FE		            cmp num,bx
 0000020A  7F 52		            jg parse_overflow_error
 0000020C  66| 39 5D FE		            cmp num,bx
 00000210  75 0A		            jne build_number
 00000212  66| BB 0007		                mov bx, 7
 00000216  66| 39 5D FA		                cmp digit,bx
 0000021A  7F 42		                jg parse_overflow_error
 0000021C			            build_number:
 0000021C  66| 8B 45 FE		            mov ax, num
 00000220  66| BB 000A		            mov bx, 0Ah
 00000224  66| F7 EB		            imul bx
 00000227  66| 8B 5D FA		            mov bx, digit
 0000022B  66| 03 C3		            add ax, bx
 0000022E  66| 89 45 FE		            mov num,ax  
 00000232  8A 45 FC		            mov al,i
 00000235  FE C0		            inc al
 00000237  88 45 FC		            mov i,al
 0000023A  E9 FFFFFF3D		            jmp convert_to_int
 0000023F			        apply_sign_and_return:
 0000023F  66| 8B 45 FE		            mov ax, num
 00000243  66| 0F BE 5D		            movsx bx, sign
	   FD
 00000248  66| 0F AF C3		            imul ax, bx
 0000024C  41/ 59		            pop r9
 0000024E  41/ 58		            pop r8
 00000250  5A			            pop rdx
 00000251  59			            pop rcx
 00000252  5B			            pop rbx
				            ret
 00000255			        parse_nan_error:
 00000255  48/ 8D 0D		            lea rcx, erNaN
	   0000008E R
 0000025C  EB 07		            jmp parse_error
 0000025E			        parse_overflow_error:
 0000025E  48/ 8D 0D		            lea rcx, erOver
	   000000E2 R
 00000265			        parse_error:
 00000265  E8 FFFFFDE1		            call cout
 0000026A  48/ 33 C9		            xor rcx, rcx 
 0000026D  E8 00000000 E	            call ExitProcess
				            ret
				        ret 
 00000276			    stoi endp
				
 00000276			    input proc
 00000276  50			        push rax
 00000277  51			        push rcx
 00000278  48/ 83 EC 08		        sub rsp, 8
 0000027C  48/ 8D 0D		        lea rcx, strA
	   00000000 R
 00000283  E8 FFFFFDC3		        call cout
 00000288  E8 FFFFFDEF		        call cin
 0000028D  E8 FFFFFE40		        call stoi
 00000292  66| 89 05		        mov varA, ax
	   00000156 R
				
 00000299  48/ 8D 0D		        lea rcx, strB
	   0000000A R
 000002A0  E8 FFFFFDA6		        call cout
 000002A5  E8 FFFFFDD2		        call cin
 000002AA  E8 FFFFFE23		        call stoi 
 000002AF  66| 89 05		        mov varB, ax
	   00000158 R
 000002B6  48/ 83 C4 08		        add rsp, 8
 000002BA  58			        pop rax 
 000002BB  59			        pop rcx
 000002BC  C3			        ret
 000002BD			    input endp
 000002BD			    calc proc
 000002BD  50			        push rax
 000002BE  53			        push rbx
 000002BF  51			        push rcx
 000002C0  48/ 83 EC 08		        sub rsp, 8 
 000002C4  48/ C7 C0		        mov rax, 5Dh
	   0000005D
 000002CB  48/ 0F BF 1D		        movsx rbx, varA 
	   00000156 R
 000002D3  48/ 0F BF 0D		        movsx rcx, varB
	   00000158 R
 000002DB  48/ 03 C3		        add rax, rbx
 000002DE  48/ 2B C1		        sub rax, rcx
 000002E1  48/ 89 05		        mov varResult, rax
	   0000015A R
 000002E8  48/ 83 C4 08		        add rsp, 8
 000002EC  59			        pop rcx
 000002ED  5B			        pop rbx
 000002EE  58			        pop rax
 000002EF  C3			        ret
 000002F0			    calc endp 
 000002F0			    output proc 
 000002F0  50			        push rax
 000002F1  53			        push rbx
 000002F2  51			        push rcx
 000002F3  52			        push rdx
 000002F4  41/ 50		        push r8
 000002F6  41/ 51		        push r9
 000002F8  48/ 83 EC 30		        sub rsp, 30h
 000002FC  48/ 8B 1D		        mov rbx, varResult
	   0000015A R
 00000303  48/ 89 5C 24		        mov [rsp + 20h], rbx
	   20
 00000308  48/ 8D 0D		        lea rcx, buffer
	   00000172 R
 0000030F  48/ 8D 15		        lea rdx, strResult
	   00000014 R
 00000316  4C/ 0F BF 05		        movsx r8, varA
	   00000156 R
 0000031E  4C/ 0F BF 0D		        movsx r9, varB
	   00000158 R
 00000326  E8 00000000 E	        call wsprintfW
				
 0000032B  48/ 8D 0D		        lea rcx, buffer 
	   00000172 R
 00000332  E8 FFFFFD14		        call cout
				
 00000337  48/ 8D 0D		        lea rcx, strLowest 
	   0000003E R
 0000033E  E8 FFFFFD08		        call cout
				
 00000343  E8 FFFFFCEB		        call flush
 00000348  48/ 33 D2		        xor rdx, rdx
 0000034B  66| 8B 15		        mov dx, varA
	   00000156 R
 00000352  66| 44/ 8B 05	        mov r8w, varB
	   00000158 R
 0000035A  66| 41/ 3B D0	        cmp dx, r8w
 0000035E  7F 16		        jg b_is_lower
 00000360  48/ 8D 0D		            lea rcx, strA 
	   00000000 R
 00000367  E8 FFFFFCDF		            call cout
 0000036C  4C/ 0F BF 05		            movsx r8, varA
	   00000156 R
 00000374  EB 14		            jmp cout_lowerest
 00000376			        b_is_lower: 
 00000376  48/ 8D 0D		            lea rcx, strB 
	   0000000A R
 0000037D  E8 FFFFFCC9		            call cout
 00000382  4C/ 0F BF 05		            movsx r8, varB 
	   00000158 R
 0000038A			        cout_lowerest:
 0000038A  48/ 8D 0D		        lea rcx, buffer
	   00000172 R
 00000391  48/ 8D 15		        lea rdx, strNum
	   00000036 R
 00000398  E8 00000000 E	        call wsprintfW
 0000039D  48/ 8D 0D		        lea rcx, buffer 
	   00000172 R
 000003A4  E8 FFFFFCA2		        call cout 
 000003A9  48/ 83 C4 30		        add rsp, 30h
 000003AD  41/ 59		        pop r9
 000003AF  41/ 58		        pop r8
 000003B1  5A			        pop rdx
 000003B2  59			        pop rcx
 000003B3  5B			        pop rbx
 000003B4  58			        pop rax
 000003B5  C3			        ret
 000003B6			    output endp
 000003B6			    mainCRTStartup proc
 000003B6  55			        push rbp 
 000003B7  E8 FFFFFC44		        call initHandlers
				
 000003BC  E8 FFFFFEB5		        call input
 000003C1  E8 FFFFFEF7		        call calc
 000003C6  E8 FFFFFF25		        call output
				        
 000003CB  48/ 33 C9		        xor rcx, rcx 
 000003CE  E8 00000000 E	        call ExitProcess
 000003D3  5D			        pop rbp
 000003D4  C3			        ret
 000003D5			    mainCRTStartup endp
				end
Microsoft (R) Macro Assembler (x64) Version 14.29.30147.0   12/18/24 11:10:59
Z:\data\docs\sgu\code\masm\lab8.asm			     Symbols 2 - 1




Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

calc . . . . . . . . . . . . . .	P 	 000002BD _TEXT	Length= 00000033 Public
cin  . . . . . . . . . . . . . .	P 	 0000007C _TEXT	Length= 00000056 Public
cout . . . . . . . . . . . . . .	P 	 0000004B _TEXT	Length= 00000031 Public
flush  . . . . . . . . . . . . .	P 	 00000033 _TEXT	Length= 00000018 Public
  clear_buffer . . . . . . . . .	L 	 00000043 _TEXT	
initHandlers . . . . . . . . . .	P 	 00000000 _TEXT	Length= 00000033 Public
input  . . . . . . . . . . . . .	P 	 00000276 _TEXT	Length= 00000047 Public
mainCRTStartup . . . . . . . . .	P 	 000003B6 _TEXT	Length= 0000001F Public
output . . . . . . . . . . . . .	P 	 000002F0 _TEXT	Length= 000000C6 Public
  b_is_lower . . . . . . . . . .	L 	 00000376 _TEXT	
  cout_lowerest  . . . . . . . .	L 	 0000038A _TEXT	
stoi . . . . . . . . . . . . . .	P 	 000000D2 _TEXT	Length= 000001A4 Public
  num  . . . . . . . . . . . . .	Word	 rbp - 00000002
  sign . . . . . . . . . . . . .	Byte	 rbp - 00000003
  i  . . . . . . . . . . . . . .	Byte	 rbp - 00000004
  digit  . . . . . . . . . . . .	Word	 rbp - 00000006
  skip_leading_space . . . . . .	L 	 000000F0 _TEXT	
  check_for_sign . . . . . . . .	L 	 00000120 _TEXT	
  change_sign  . . . . . . . . .	L 	 00000152 _TEXT	
  its_plus . . . . . . . . . . .	L 	 0000016F _TEXT	
  its_minus  . . . . . . . . . .	L 	 00000171 _TEXT	
  convert_to_int . . . . . . . .	L 	 0000017C _TEXT	
  check_is_digit . . . . . . . .	L 	 000001C8 _TEXT	
  char_to_dword  . . . . . . . .	L 	 000001EA _TEXT	
  build_number . . . . . . . . .	L 	 0000021C _TEXT	
  apply_sign_and_return  . . . .	L 	 0000023F _TEXT	
  parse_nan_error  . . . . . . .	L 	 00000255 _TEXT	
  parse_overflow_error . . . . .	L 	 0000025E _TEXT	
  parse_error  . . . . . . . . .	L 	 00000265 _TEXT	


Symbols:

                N a m e                 Type     Value    Attr

BUF_SIZE . . . . . . . . . . . .	Number	 00000400h   
ExitProcess  . . . . . . . . . .	L 	 00000000 External
GetStdHandle . . . . . . . . . .	L 	 00000000 External
ReadConsoleW . . . . . . . . . .	L 	 00000000 External
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
WriteConsoleW  . . . . . . . . .	L 	 00000000 External
bufLen . . . . . . . . . . . . .	QWord	 00000572 _DATA	
buffer . . . . . . . . . . . . .	Word	 00000172 _DATA	
erNaN  . . . . . . . . . . . . .	Byte	 0000008E _DATA	
erOver . . . . . . . . . . . . .	Byte	 000000E2 _DATA	
erStoi . . . . . . . . . . . . .	Byte	 00000066 _DATA	
hCin . . . . . . . . . . . . . .	QWord	 00000162 _DATA	
hCout  . . . . . . . . . . . . .	QWord	 0000016A _DATA	
lstrlenW . . . . . . . . . . . .	L 	 00000000 External
number . . . . . . . . . . . . .	QWord	 0000057A _DATA	
strA . . . . . . . . . . . . . .	Byte	 00000000 _DATA	
strB . . . . . . . . . . . . . .	Byte	 0000000A _DATA	
strLowest  . . . . . . . . . . .	Byte	 0000003E _DATA	
strNum . . . . . . . . . . . . .	Byte	 00000036 _DATA	
strResult  . . . . . . . . . . .	Byte	 00000014 _DATA	
varA . . . . . . . . . . . . . .	Word	 00000156 _DATA	
varB . . . . . . . . . . . . . .	Word	 00000158 _DATA	
varResult  . . . . . . . . . . .	QWord	 0000015A _DATA	
wMAX . . . . . . . . . . . . . .	Number	 00007FFFh   
wMIN . . . . . . . . . . . . . .	Number	 -00008000h   
wsprintfW  . . . . . . . . . . .	L 	 00000000 External

	   0 Warnings
	   0 Errors
