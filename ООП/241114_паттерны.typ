= Архитектурные паттерны
- Builder
- Singleton
- Фасад
- Абстрактная фабрика
- и др.

== Builder (строитель)
Цель: отделяет конструирование сложного объекта от его представления, так что в результате одного и того же процесса конструирвания могут получаться разные представления.

Плюсы: позволяет изменять внутреннее представление продукта; изолирует код, реализующий конструирование и представление, даёт более тонкий контрол над процессом...

== Facade (фасад)
Это структурный шаблон, позволяющий скрыть сложность системы путём сведениявсех возможных внешних вызовов к одному объекту, делегирующему их соответствующим объектам системы.

Проблема: как обеспечить унифицированный интерфейс с набром разрозненных реализаций или интерфейсов, например, с подсистемой, если нежелательно высокое вязывание с этой подситсемой или реализация подсистемы может измениться?

По сути работает как API gateway.

== Decorator (UML)
Похож на фасад. Связан с компонентами.

== Abstract Factory (абстрактная фабрика)
Система не должна зависеть от способа создания объектов, объекты используются вместе. :Надо предоставить интерфейс, не раскрывая внутреннюю реализацию.

Есть абстрактная сущность и конкретная фабрика (вариант сущности со своей спецефикой).

= Поведенческие паттерны
- Chain of responsibility
И др.
