В 333 аудитории было найдено тело бариста Инныdas
= Основные вопросы
- Понятие модели ЖЦ ПО
- Каскадная модель
- V-образная модель
- Процесс макетирования ПО
- Инкрементная модель
- Спиральная модель (= итеративная - риск)
- Компонентная модель
- Модель быстрой разработки проекта

= Модели жизненного цикла
/ Стратегия жизненного цикла ПО: порядок следования и содержания основных этапов процесса разработки.

/ Модель жизненного цикла ПО: структура, содержащая процессы действия и задачи, которые осуществляются в ходе разработки, использования и сопровождения программного продукта.

Основные модели:
- Каскадна модель
- Макетирование
- Инкрементная модель
- Спиральная модель

== Каскадная модель
+ Системный анализ
+ Анализ требований
+ Проектирование
+ Реализация
+ Тестирование
+ Внедрение
+ И заново

Преимущества каскадной модели:
- Широкая известность и простота модели
- Упорядоченность преодоления слоностей хорошо срабатывает для достаточно понятных, но трудно разршимых проектов
- Отличается стабильностью требований
- Удобна, когда требования к качества доминируют над требованиями к затратам и графику
- И другие плюсы

Недостатки каскадной модели:
- Интеграция всех полуенных результатов происходит внезапно в завершающей стадии работы модели и у клиента практически нет возможности ознакомиться с системой заранее
- В основе модели лежит последовательная линейная структура: невозможность предотвраения возникновения итераций между фазами
- Все требования должны быть известны в начале жизненного цикла

Критерии применения каскадной модели:
- Требования к ПО и их реализация максимально чётко определены и понятны
- еизменяемое определение продукта и вполне понятные технические методики
- Если компания имеет опыт построения подобоного рода систем

Область применения:
- Сложные системы с большим количеством задач вычислительного характера
- Системы управления производственными процессами повышенной опасности

== V-образная модель
#image("imgs/003.png")

Поскольку тесты разрабатываются по ходу реализации компонентов, результат получается более надёжным. Кроме того, по ходу заказчику проще обнаружить недосказанности и разночтения в своём техническом задании прежде чем будет реализован готовый продукт.

Недостатки:
- С её помощью епросто справиться с параллельными событиями
- Не учтены итерации между фазами
- В модели не предусмотрено внесение требования динамических изменений на разных этапахжизненного требования
- Тестирование всё равно происходит слишком поздно
- В общем, всё как у каскада

== Макетирование
/ Макетирование: это процесс создания модели разрабатываемого программного продукта.

Модель может приимать один из трёх видов:
- Бумажный макет или электронный макет, который представляет человеко-машинный интерфейс
- Работающий макет (выполняет только часть требуемых функций)
- Существующая программа (характеристики которой должны быть улучшены)

По наблюдениям Батраевой, это не подходит для построения всего проекта, но подходит для построения точных и подходящих требований заказчика ко всем интерфейсам.
#figure({
    image(width: 5cm, "imgs/004.png")
    image(width: 5cm, "imgs/005.png")
})

Недостаток один, но большой: требуется активное участие заказчика. Кроме того, разработка прототипов требует больших затрат по времени.

Критерии применения макетирования:
- Требования неизвестны заранее, не постоянны или могут быть неверно истолкованы или неудачно сформулированы, требуют уточнения
- Выполняется новая, не имеющая аналогов разработка
- Если о прикладной программе отсутствует чёткое представление
- Разработчики не уверены в том, какую оптимальную архитектуру или алгоритмы следует применять
- Существует потребность в разработке пользовательских интерфейсов
- И так далее

== Инкрементная модель жизненного цикла
/ Инкрементная разработка: представляет собой процесс частичной реализации всей системы и медленного наращиваня функциональных возможностей.

Инкрементная модель действует по принципу каскадной модели с перекрытиями.

Два подхода к набору требований:
- полный заранее сформированный набор требований, выполненных в виде небольших проектов, которые постепенно собираются в один большой
- ещё какой-то

Преимущества:
- В результате каждого инкремента получается функциональный продукт
- Заказчик располагает возможностью высказаться по поводу каждой разработанной версии системы
- Правило по принципу "разделяй и властвуй" позволяет разбить возникшую проблему на управляемые части
- Заказчики могут распознавать самые важные и плезные функциональные возможности продукта на более ранних этапах разработки
- Требования сабилизируются на момент создания определённого инкреметна
- Инкременты функциональных возможностей несут больше пользы и проще при тестировании

Недостатки:
- Определение полной функциональной системы должно осуществиться в начале жизненного цикла, чтобы обеспечить определение инкрементов
- И другие

Критерии применения:
- Если большинство требований модно сформулировать заранее, но их появление ожидается через определёныый период времени
- Елси рыночное окно слишком узкое и существует потребность быстро поставить на рынок продукт, имеющий ункциональные базовые свойства
- При разработке программ, связанных с низкой или средней  степенью риска

При инкрементной модели мы видим частично готоввый прототип с самого начала, а при эволюционной готовый и работающий проект будет виден только на финальной стадии.


